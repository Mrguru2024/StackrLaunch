 1. Set an environment variable in Replit (important)
Go to .env file (or Replitâ€™s Secrets tab) and add:

bash
Copy
Edit
VITE_HMR_PORT=443
âœ… 443 is the secure port used in Replitâ€™s HTTPS URLs, which is required to construct a proper wss:// URL.

âœ… 2. Update vite.config.ts to use that env variable
ts
Copy
Edit
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import themePlugin from "@replit/vite-plugin-shadcn-theme-json";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";

const hmrPort = process.env.VITE_HMR_PORT || 443;

export default defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    themePlugin(),
    ...(process.env.NODE_ENV !== "production" &&
    process.env.REPL_ID !== undefined
      ? [
          await import("@replit/vite-plugin-cartographer").then((m) =>
            m.cartographer(),
          ),
        ]
      : []),
  ],
  server: {
    port: 5000,
    strictPort: true,
    hmr: {
      protocol: "wss", // Needed for secure Replit
      host: "localhost",
      port: Number(hmrPort),
      clientPort: Number(hmrPort),
    },
  },
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets"),
    },
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true,
  },
});
âœ… 3. (If Needed) Client-side fallback (only if Vite still ignores config)
Create a file: client/src/vite-hmr-fix.ts:

ts
Copy
Edit
// Only do this on the client
if (typeof window !== "undefined") {
  const ws = window.location.hostname;
  const token = import.meta.hot?.data?.token;
  const hmrPort = 443;

  const wsUrl = `wss://${ws}:${hmrPort}/?token=${token}`;
  console.log("[vite-hmr-fix] Forcing HMR WebSocket URL to:", wsUrl);

  // Override global WebSocket to force this connection
  const _WebSocket = window.WebSocket;
  window.WebSocket = function (url: string, protocols?: string | string[]) {
    if (url.startsWith("wss://localhost:undefined")) {
      return new _WebSocket(wsUrl, protocols);
    }
    return new _WebSocket(url, protocols);
  } as any;
}
Then in main.tsx, import it first:

ts
Copy
Edit
import "./vite-hmr-fix";
âœ… Final Steps
Save all changes

Restart your Replit container (stop & start)

Open the dev tools â€” HMR should now connect via:

ruby
Copy
Edit
wss://your-replit-subdomain.repl.co/?token=...
No more undefined.

ðŸ§  Why This Fix Works
Replit proxying prevents Vite from resolving correct port automatically

We force the correct values via .env + config

And (only if still broken) we polyfill the WebSocket constructor with a valid fallback URL

